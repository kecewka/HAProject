swagger: "2.0"
info:
  description: "This is a Bookstore."
  version: "1.0.0"
  title: "HalykAcademy Bookstore"
#host: "petstore.swagger.io"
#basePath: "/v2"
tags:
- name: "books"
  description: "Book info"
- name: "authors"
  description: "Book authors"
- name: "publishers"
  description: "Book Publishers"
schemes:
- "https"
- "http"
paths:
  /books:
    post:
      tags:
      - "books"
      summary: "Adds a new book to the store"
      description: "Some description for later"
      operationId: "addBooks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Books"
      responses:
        "200":
          description: "Book has been saved successfully"
          schema:
            $ref: "#/definitions/Books"
        "405":
          description: "Invalid input"
          
    
    get:
      tags:
      - "books"
      summary: "Gets all the books"
      description: ""
      operationId: "findBooks"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BooksForGet"
        "400":
          description: "Invalid status value"
          
  /books/{id}:
    get:
      tags:
      - "books"
      summary: "Find Book by ID"
      description: "Returns a single book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/BooksForGet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
    
    delete:
      tags:
      - "books"
      summary: "Deletes a book by ID"
      description: ""
      operationId: "deleteBook"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Book id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successfully deleted"
          schema:
            $ref: "#/definitions/Books"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
          
    put:
      tags:
      - "books"
      summary: "Update an existing Book"
      description: ""
      operationId: "updateBook"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Book id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Books"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
        "405":
          description: "Validation exception"
          
  /authors:
    post:
      tags:
      - "authors"
      summary: "Adds a new author to the store"
      description: "Some description for later"
      operationId: "addAuthors"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Authors"
      responses:
        "200":
          description: "Book has been saved successfully"
          schema:
            $ref: "#/definitions/Authors"
        "405":
          description: "Invalid input"
          
    
    get:
      tags:
      - "authors"
      summary: "Gets all the authors"
      description: ""
      operationId: "findAuthors"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AuthorsForGet"
        "400":
          description: "Invalid status value"
          
  /authors/{id}:
    get:
      tags:
      - "authors"
      summary: "Find Author by ID"
      description: "Returns a single Author"
      operationId: "getAuthorById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of an author to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthorsForGet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Author not found"
    
    delete:
      tags:
      - "authors"
      summary: "Deletes an author by ID"
      description: ""
      operationId: "deleteAuthor"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Author id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successfully deleted"
          schema:
            $ref: "#/definitions/AuthorsForGet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
          
    put:
      tags:
      - "authors"
      summary: "Update an existing Author"
      description: ""
      operationId: "updateAuthor"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Author id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Author object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Authors"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Author not found"
        "405":
          description: "Validation exception"
          
  /publishers:
    post:
      tags:
      - "publishers"
      summary: "Adds a new Publisher to the store"
      description: "Some description for later"
      operationId: "addPublishers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Publisher object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Publishers"
      responses:
        "200":
          description: "Publisher has been saved successfully"
          schema:
            $ref: "#/definitions/Publishers"
        "405":
          description: "Invalid input"
          
    
    get:
      tags:
      - "publishers"
      summary: "Gets all the publishers"
      description: ""
      operationId: "findPublishers"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PublishersForGet"
        "400":
          description: "Invalid status value"
          
  /publishers/{id}:
    get:
      tags:
      - "publishers"
      summary: "Find Publisher by ID"
      description: "Returns a single Publisher"
      operationId: "getPublisherById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of publisher to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PublishersForGet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Publisher not found"
    
    delete:
      tags:
      - "publishers"
      summary: "Deletes a publisher by ID"
      description: ""
      operationId: "deletePublisher"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Publisher id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successfully deleted"
          schema:
            $ref: "#/definitions/PublishersForGet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Publisher not found"
          
    put:
      tags:
      - "publishers"
      summary: "Update an existing Publisher"
      description: ""
      operationId: "updatePublisher"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Publisher id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Publisher object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Publishers"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Publisher not found"
        "405":
          description: "Validation exception"
          
  
  
definitions:
  Books:
    type: "object"
    properties:
      price:
        type: "number"
        format: "double"
      authorsList:
        type: "array"
        items: 
          $ref: "#/definitions/AuthorsForGet"
      publisher:
        $ref: "#/definitions/PublishersForGet"
      name:
        type: "string"
      numberOfPages:
        type: "integer"
        format: "int64"
      yearOfRelease:
        type: "integer"
        format: "int64"
        
  BooksForGet:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      price:
        type: "number"
        format: "double"
      authorsList:
        type: "array"
        items: 
          $ref: "#/definitions/AuthorsForGet"
      publisher:
        $ref: "#/definitions/PublishersForGet"
      name:
        type: "string"
      numberOfPages:
        type: "integer"
        format: "int64"
      yearOfRelease:
        type: "integer"
        format: "int64"
          
  Publishers:
    type: "object"
    properties:
      name:
        type: "string"
      publishedBooksList:
        type: "array"
        items:
          $ref: "#/definitions/BooksForGet"  
          
  PublishersForGet:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      publishedBooksList:
        type: "array"
        items:
          $ref: "#/definitions/BooksForGet"  
          
  AuthorsForGet:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      surname:
        type: "string"
      name:
        type: "string"
      patronymicName:
        type: "string"
      dateOfBirth:
        type: "string"
        format: "date"
      writtenBookList:
        type: "array"
        items:
          $ref: "#/definitions/BooksForGet"
          
  Authors:
    type: "object"
    properties:
      surname:
        type: "string"
      name:
        type: "string"
      patronymicName:
        type: "string"
      dateOfBirth:
        type: "string"
        format: "date"
      writtenBookList:
        type: "array"
        items:
          $ref: "#/definitions/BooksForGet"